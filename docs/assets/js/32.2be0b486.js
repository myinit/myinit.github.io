(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{392:function(n,t,e){"use strict";e.r(t);var a=e(42),o=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"flutter-局部路由实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flutter-局部路由实现"}},[n._v("#")]),n._v(" Flutter 局部路由实现")]),n._v(" "),e("p",[n._v("Flutter是借鉴React的开发思想实现的，在子组件的插槽上，React有"),e("code",[n._v("this.props.children")]),n._v("，Vue有"),e("code",[n._v("<slot></slot>")]),n._v("。")]),n._v(" "),e("p",[n._v("当然Flutter也有类似的Widget，那就是"),e("code",[n._v("Navigator")]),n._v("，不过是以router的形式实现（像"),e("code",[n._v("<router-view></router-view>")]),n._v("？？？）。")]),n._v(" "),e("p",[e("strong",[n._v("Navigator的使用无非3个属性")])]),n._v(" "),e("ul",[e("li",[e("code",[n._v("initialRoute")]),n._v(": 初始路由")]),n._v(" "),e("li",[e("code",[n._v("onGenerateRoute")]),n._v(": 匹配路由")]),n._v(" "),e("li",[e("code",[n._v("onUnknownRoute")]),n._v(": 404")])]),n._v(" "),e("p",[e("strong",[n._v("在实现层面")])]),n._v(" "),e("p",[n._v("首先：Navigator的高度为infinity。如果直接父级非最上级也是infinity会产生异常，例如，Scaffold -> Column -> Navigator。所以：Navigator需要附件限制高度，例如：Scaffold -> Column -> Container（height: 300） -> Navigator")]),n._v(" "),e("p",[n._v("然后：在onGenerateRoute属性中，使用第一个BuildContext参数，能够在MaterialApp未设置route的情况下使用"),e("code",[n._v("Navigator.pushNamed(nContext, '/efg');")]),n._v("跳到对应的子路由中。")]),n._v(" "),e("p",[n._v("最后：Navigator执行寻找路由顺序是 initialRoute -> onGenerateRoute -> onUnknownRoute，这个和React的Route是类似的。")]),n._v(" "),e("p",[e("strong",[n._v("最后附上源码")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import 'package:flutter/material.dart';\n\nclass NavigatorPage extends StatefulWidget {\n  @override\n  _NavigatorPageState createState() => _NavigatorPageState();\n}\n\nclass _NavigatorPageState extends State<NavigatorPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Navigator'),\n      ),\n      body: Column(\n        children: <Widget>[\n          Text('Navigator的高度为infinity'),\n          Text('如果直接父级非最上级也是infinity会产生异常'),\n          Container(\n            height: 333,\n            color: Colors.amber.withAlpha(111),\n            child: Navigator( // Navigator\n              initialRoute: '/abc',\n              onGenerateRoute: (val) {\n                RoutePageBuilder builder;\n                switch (val.name) {\n                  case '/abc':\n                    builder = (BuildContext nContext, Animation<double> animation, Animation<double> secondaryAnimation) => Column(\n                      // 并没有在 MaterialApp 中设定 /efg 路由\n                      // 因为Navigator的特性 使用nContext 可以跳转 /efg\n                      children: <Widget>[\n                        Text('呵呵呵'),\n                        RaisedButton(\n                          child: Text('去 /efg'),\n                          onPressed: () {\n                            Navigator.pushNamed(nContext, '/efg');\n                          },\n                        )\n                      ],\n                    );\n                  break;\n                  case '/efg':\n                    builder = (BuildContext nContext, Animation<double> animation, Animation<double> secondaryAnimation) => Row(\n                      children: <Widget>[\n                        RaisedButton(\n                          child: Text('去 /hhh'),\n                          onPressed: () {\n                            Navigator.pushNamed(nContext, '/hhh');\n                          },\n                        )\n                      ],\n                    );\n                  break;\n                  default:\n                    builder = (BuildContext nContext, Animation<double> animation, Animation<double> secondaryAnimation) => Center(\n                      child: RaisedButton(\n                        child: Text('去 /abc'),\n                        onPressed: () {\n                          Navigator.pushNamed(nContext, '/abc');\n                        },\n                      )\n                    );\n                }\n                return PageRouteBuilder(\n                  pageBuilder: builder,\n                  // transitionDuration: const Duration(milliseconds: 0),\n                );\n              },\n              onUnknownRoute: (val) {\n                print(val);\n              },\n              observers: <NavigatorObserver>[]\n            ),\n          ),\n          Text('Navigator执行寻找路由顺序'),\n          Text('initialRoute'),\n          Text('onGenerateRoute'),\n          Text('onUnknownRoute'),\n        ],\n      ),\n    );\n  }\n}\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);